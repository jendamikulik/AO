Tohle je hodnƒõ dobr√©, ale je≈°tƒõ to nen√≠ ‚Äûzlat√Ω h≈ôeb‚Äú. üåü
**Kr√°tce ƒçesky:** V√Ωsledky ze `SOLVER3.py` ukazuj√≠, ≈æe pipeline bƒõ≈æ√≠ a f√°ze-p≈ôechod (Œ±‚âà4.26) m√° smysl. Ale metrika Œ® v oscil√°toru je v souƒçasn√© podobƒõ **nedefinovan√° fyzik√°lnƒõ** (bƒõhem bƒõhu ti DÃÇ pad√° k nule kv≈Øli noise-gate), tak≈æe vych√°z√≠ **obrovsk√© Œ® (‚âà 50‚Äì60)** a **Besselova predikce r\_pred‚âà0.99** neodpov√≠d√° skuteƒçn√©mu r‚âà0.56. To nen√≠ chyba ‚Äûteorie‚Äú, ale **definice Œ®** a **zpƒõtn√© vazby**: mƒõ≈ô√≠≈° ‚Äûefektivn√≠ difuzi‚Äú z gate-potlaƒçen√©ho ≈°umu ‚áí **DÃÇ‚Üí0** ‚áí Œ®=(Œ∫/DÃÇ)r‚Üí‚àû. Potom r\_pred z $I_1/I_0$ nutnƒõ m√≠≈ô√≠ k 1, i kdy≈æ re√°ln√° dynamika (s closure-drivem a gatingem) dr≈æ√≠ r \~ 0.5‚Äì0.6.

N√≠≈æe je p≈ôesnƒõ, co si o tom mysl√≠m, a konkr√©tn√≠ patch-kroky, kter√© ti vr√°t√≠ **sebekonzistenci $r \leftrightarrow \Psi$**, zv√Ωrazn√≠ **SAT/UNSAT kontrast** a uzamknou AO-interpretaci bez Sagnace/SR.

---

## What looks right

* **Phase transition track:** Œ±=2.00 a Œ±=4.26 d√°vaj√≠ solverovac√≠ energii 0 (snadn√©/hard SAT), Œ±=6.00 d√°v√° >0 (UNSAT-like). To je na $n=50$ realistick√©.
* **Closure drive + Hadamard kernel:** Konstrukt d√°v√° stabiln√≠ koherenci r‚âà0.55‚Äì0.58, co≈æ znamen√°, ≈æe tv≈Øj **closure-drive** pracuje (i kdy≈æ metrika Œ® je p≈ôep√°len√°).
* **Freeze logic:** Vid√≠≈° `frozen: True` pro Œ±=2.00‚Äîpipeline se um√≠ ‚Äûuzamknout‚Äú. To je p≈ôesnƒõ ta ide√°ln√≠ self-calibration behavior, kterou v AO chceme.

## What‚Äôs off (and why)

1. **Œ® definition not physical:**
   Aktu√°lnƒõ definuje≈° $\Psi_{\rm AO}(t) = \frac{\kappa}{\hat D(t)}\, r(t)$, kde $\hat D$ odhaduje≈° z **potlaƒçen√©ho** (gate) ≈°umu `noise_part`. Jakmile roste r, **gate** sni≈æuje ≈°um ‚áí var(noise\_part) ‚Üí 0 ‚áí $\hat D \to 0$. Pak $\Psi$ diverguje, a z Besselova vztahu $r \approx I_1(\Psi)/I_0(\Psi)$ ‚Äûvyjde‚Äú t√©mƒõ≈ô 1‚Äîale to je artefakt definice $\hat D$, ne re√°ln√Ω fyzik√°ln√≠ pomƒõr drivu k difuzi.

2. **Bessel law holds for standard noisy Kuramoto only:**
   Statick√° formule $r = I_1(\Psi)/I_0(\Psi)$ plat√≠ v **stacion√°rn√≠ Fokker‚ÄìPlanck** rovnov√°ze s **aditivn√≠m b√≠l√Ωm ≈°umem** a **sinusov√Ωm vazebn√≠m ƒçlenem**, bez extra closure-drive a bez noise-gate. Ty m√°≈° **closure-drive $\sin(\bar\psi - \theta)$** *plus* gate na ≈°umu. To mƒõn√≠ stacion√°rn√≠ rozdƒõlen√≠ f√°z√≠ ‚áí Bessel≈Øv odhad `r_pred` p≈ôestane b√Ωt p≈ô√≠m√Ωm ‚Äûmƒõ≈ôidlem kvality‚Äú a mus√≠ se dƒõlat **sebekonzistentnƒõ**.

3. **UNSAT frustration je p≈ô√≠li≈° mƒõkk√°:**
   N√°hodnƒõ podepsan√© K sice vn√°≈°√≠ frustraci, ale kontrast SAT vs UNSAT v r z≈Øst√°v√° slab√Ω (r‚âà0.56 vs 0.58...). Chce to **clause-aware** frustraci (viz Patch 2), aby se rozd√≠l projevil i v order-parametru.

---

## Patch 1 ‚Äî Physically consistent Œ® and update loop

**C√≠l:** Zav√©st **fyzik√°ln√≠** $\Psi_{\rm phys}$, kter√° nekolabuje s gate, a update Œ∫ vynutit **sebekonzistentnƒõ** tak, aby platilo

$$
r \;\approx\; \frac{I_1(\Psi_{\rm phys})}{I_0(\Psi_{\rm phys})}, 
\qquad \Psi_{\rm phys} := \frac{K_{\rm eff}}{D_{\rm eff}} .
$$

**Jak na to:**

* **Nemƒõ≈ô DÃÇ z gate-potlaƒçen√©ho ≈°umu.** M√≠sto toho odhadni $D_{\rm eff}$ z **f√°zov√© difuze v rotuj√≠c√≠m r√°mci**:

  $$
  \phi_i(t) := \mathrm{wrap}(\theta_i(t)-\bar\psi(t)),\quad
  D_{\rm eff} \approx \frac{1}{2}\frac{d}{dt}\,\mathrm{Var}[\phi_i(t)] .
  $$

  Tohle je robustn√≠ i p≈ôi gate (proto≈æe pracuje≈° s *v√Ωstupn√≠* f√°z√≠, ne s injekƒçn√≠m ≈°umem).

* **Definuj $K_{\rm eff}$** jako skuteƒçnou ‚Äûs√≠lu‚Äú vazby, tj. **mƒõ≈ôen√Ω** root-mean-square Kuramoto torque (bez gate):

  ```python
  torque = (K * np.sin(theta[None,:] - theta[:,None])).sum(axis=1)
  K_eff = np.sqrt(np.mean(torque**2))
  ```

  Volitelnƒõ zapracuj closure-drive (v√°≈æenƒõ), ale **nep≈ôim√≠ch√°vej gate**.

* **Self-consistent Œ∫ update:** m√≠sto $(\kappa += \beta ( \Psi^* - \Psi))$ pracuj s **chybou v r**:

  $$
  r_{\rm tar} = I_1(\Psi_{\rm phys})/I_0(\Psi_{\rm phys}),\qquad
  e_r = r_{\rm tar} - r .
  $$

  Pak:

  ```python
  kappa += beta_k * e_r
  ```

  T√≠m tlaƒç√≠≈° syst√©m ke konzistenci mezi ‚Äûmƒõ≈ôen√Ωm‚Äú $D_{\rm eff}$, ‚Äûmƒõ≈ôen√Ωm‚Äú $K_{\rm eff}$ a emergentn√≠m r.

**Drop-in code (replace Œ® and Œ∫ part in your loop):**

```python
# --- inside the integration loop, after updating theta ---
# 1) Rotating-frame phases
phi = (theta - psi_bar + np.pi) % (2*np.pi) - np.pi

# 2) Effective diffusion from phase diffusion (EMA)
var_phi = np.var(phi)
if t > 1:
    dvar_dt = max(0.0, (var_phi - var_phi_prev) / dt)
else:
    dvar_dt = 0.0
var_phi_prev = var_phi
D_eff = 0.5 * dvar_dt
D_eff = max(D_eff, 1e-4)  # floor to avoid blow-ups

# 3) Effective coupling from actual torque (no gate)
torque = (K * np.sin(theta[None,:] - theta[:,None])).sum(axis=1)
K_eff = np.sqrt(np.mean(torque**2)) + 1e-9

# 4) Physical Œ® and Bessel target
Psi_phys = (K_eff / D_eff)
r_tar    = float(i1(Psi_phys) / i0(Psi_phys)) if i0(Psi_phys) > 0 else 0.0

# 5) Self-consistent kappa update via r error
e_r = r_tar - r
kappa += beta * e_r
kappa = float(np.clip(kappa, 0.05, 5.0))

# 6) For logging
Psi_AO[t] = Psi_phys
```

**Oƒçek√°van√Ω v√Ωsledek:**

* $\Psi$ bude v **rozumn√©m rozsahu** (typicky \~3‚Äì10 v SAT-like a ni≈æ≈°√≠ v UNSAT-like, podle N, K a ≈°umu),
* `r_pred` z Bessel vztahu zaƒçne **sedƒõt** s empirick√Ωm r (Œîr \~ 0.02‚Äì0.05),
* kontrast SAT vs UNSAT se zv√Ωrazn√≠ (SAT: vy≈°≈°√≠ r a ni≈æ≈°√≠ D\_eff ‚áí vy≈°≈°√≠ Œ®; UNSAT: vy≈°≈°√≠ efektivn√≠ ‚Äûfrustrace‚Äú ‚áí ni≈æ≈°√≠ r, vy≈°≈°√≠ D\_eff).

---

## Patch 2 ‚Äî Clause-aware frustration (stronger SAT/UNSAT split)

M√≠sto ƒçistƒõ n√°hodn√©ho ‚Äûsigns‚Äú v `frustrated=True` postav **signovanou sousednost** z klauzul√≠:

* Pro ka≈ædou dvojici promƒõnn√Ωch, kter√© se vyskytuj√≠ ve stejn√© klauzuli s **konfliktn√≠mi polaritami**, p≈ôidej **negativn√≠** p≈ô√≠spƒõvek do $K_{ij}$.
* Pro **kompatibiln√≠** p√°ry (stejn√° polarita nebo dopl≈àkov√° ve v√≠ce klauzul√≠ch) p≈ôidej **pozitivn√≠** p≈ô√≠spƒõvek.

Hrub√Ω skeƒç:

```python
J = np.zeros((N, N))
for C in clauses:
    lits = [(abs(l)-1, 1 if l>0 else -1) for l in C]
    for a in range(3):
        i, si = lits[a]
        for b in range(a+1,3):
            j, sj = lits[b]
            # conflict -> frustrate
            J[i,j] += -1.0 if (si != sj) else +1.0
            J[j,i]  = J[i,j]
# Normalize and blend into K as signs
signs = np.sign(J + 1e-9)
K = np.abs(K) * signs  # keep magnitudes, set frustration by sign
```

‚áí V UNSAT oblasti dostane≈° skuteƒçn√Ω **spin-glass styl** graf, kter√Ω dr≈æ√≠ r n√≠zko i p≈ôi stejn√©m ≈°umu.

---

## Patch 3 ‚Äî Freeze logic with two criteria

Zastav ‚Äûfreeze‚Äú ne podle $|\Psi-\Psi^\*|$, ale **podle dvou nez√°visl√Ωch krit√©ri√≠**:

1. **Bessel consistency:** $|r - r_{\rm tar}| < \varepsilon_r$ (nap≈ô. 0.02)
2. **Phase diffusion stability:** $|\dot{\mathrm{Var}}[\phi]| < \varepsilon_D$ (nap≈ô. $10^{-4}$)

Teprve kdy≈æ obƒõ spln√≠≈° po L krok≈Ø, p≈ôepni `freeze=True`.

---

## How this answers the ‚ÄúSagnac/SR‚Äù noise

* Tohle je **ƒçistƒõ AO**, ≈æ√°dn√© SR, ≈æ√°dn√Ω ‚ÄûSagnac derivov√°n z r√°mc≈Ø‚Äú.
* **Lok√°ln√≠ Doppler** (per-bounce) i **glob√°ln√≠ closure** (rezonance) jsou zaps√°ny v jedin√©m **operatorov√©m z√°konu**, a v oscil√°toru se odr√°≈æ√≠ jako **driv/diff pomƒõr $\Psi$** a jeho konzistentn√≠ Besselova z√°vislost $r=I_1/I_0$.
* Jakmile jsou $D_{\rm eff}$ a $K_{\rm eff}$ mƒõ≈ôeny ‚Äûfyzik√°lnƒõ‚Äú (ne p≈ôes gate-potlaƒçen√Ω ≈°um), ƒç√≠sla budou **sama od sebe sedƒõt** a rozd√≠l SAT/UNSAT se uk√°≈æe jako **skuteƒçn√Ω f√°zov√Ω p≈ôechod v uz√°vƒõru** (closure-lock vs frustration).

---

## Minimal diff you can drop into `SOLVER3.py`

* Nahraƒè definici Œ® a update Œ∫ blokem z **Patch 1**.
* Zp≈ô√≠sni frustraci podle **Patch 2**.
* Uprav freeze podle **Patch 3**.

T√≠m dostane≈°:

* **r vs r\_pred** konzistenci (u≈æ ≈æ√°dn√© `Œ®=50` & `r_pred‚âà0.99` p≈ôi r‚âà0.56),
* **vƒõt≈°√≠ SAT/UNSAT rozd√≠l** v r(t) i Œ®(t),
* **stabiln√≠ freeze** bez ‚Äûzamrznut√≠ na fale≈°n√© metrice‚Äú.

---

## Next quick experiments

1. **Sweep Œ± on n=200** (vƒõt≈°√≠ graf ‚Üí ost≈ôej≈°√≠ p≈ôechod) a plotni $\langle r \rangle$ a $\langle \Psi\rangle$ vs Œ±.
2. **Planted UNSAT** (XOR jadro) vs n√°hodn√© clause ‚Üí porovnej r, D\_eff, Œ®.
3. **Cross-check s DREAM6**: pro stejn√© instance porovnej $\mu$ (top eigenvalue / C) vs. $r, \Psi$. Mƒõla by se objevit monot√≥nn√≠ korelace (closure witness v obou r√°mc√≠ch).

---

### Bottom line

* M√°≈° **spr√°vn√Ω stroj**.
* Pot≈ôebuje jen jednu ‚Äûfyzik√°ln√≠‚Äú opravu: **co je Œ®** a **jak se k n√≠ dojde**.
* Jakmile Œ® postav√≠≈° na mƒõ≈ôen√© $D_{\rm eff}$ a $K_{\rm eff}$ (m√≠sto gate-potlaƒçen√©ho ≈°umu), **Besselova vlastn√≠ konzistence** se vr√°t√≠ a **SAT/UNSAT kontrast** vyskoƒç√≠ do oƒç√≠.

Chce≈°, abych ti to p≈ôepsal rovnou do tv√©ho `SOLVER3.py` jako patch blok (diff-styl)? Nebo m√°m poslat cel√Ω ‚ÄûSOLVER3\_phys.py‚Äú s implementovan√Ωmi t≈ôemi patchemi?
